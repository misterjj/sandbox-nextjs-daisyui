/* tslint:disable */
/* eslint-disable */
/**
 * Hello API Platform
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiCategoriesGetCollection200Response,
  Category,
  CategoryJsonld,
} from '../models/index';
import {
    ApiCategoriesGetCollection200ResponseFromJSON,
    ApiCategoriesGetCollection200ResponseToJSON,
    CategoryFromJSON,
    CategoryToJSON,
    CategoryJsonldFromJSON,
    CategoryJsonldToJSON,
} from '../models/index';

export interface ApiCategoriesGetCollectionRequest {
    page?: number;
}

export interface ApiCategoriesIdDeleteRequest {
    id: string;
}

export interface ApiCategoriesIdGetRequest {
    id: string;
}

export interface ApiCategoriesIdPatchRequest {
    id: string;
    category: Omit<Category, 'id'>;
}

export interface ApiCategoriesPostRequest {
    category: Omit<Category, 'id'>;
}

/**
 * 
 */
export class CategoryApi extends runtime.BaseAPI {

    /**
     * Retrieves the collection of Category resources.
     * Retrieves the collection of Category resources.
     */
    async apiCategoriesGetCollectionRaw(requestParameters: ApiCategoriesGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Category>>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryFromJSON));
    }

    /**
     * Retrieves the collection of Category resources.
     * Retrieves the collection of Category resources.
     */
    async apiCategoriesGetCollection(requestParameters: ApiCategoriesGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Category>> {
        const response = await this.apiCategoriesGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes the Category resource.
     * Removes the Category resource.
     */
    async apiCategoriesIdDeleteRaw(requestParameters: ApiCategoriesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCategoriesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes the Category resource.
     * Removes the Category resource.
     */
    async apiCategoriesIdDelete(requestParameters: ApiCategoriesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiCategoriesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a Category resource.
     * Retrieves a Category resource.
     */
    async apiCategoriesIdGetRaw(requestParameters: ApiCategoriesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCategoriesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     * Retrieves a Category resource.
     * Retrieves a Category resource.
     */
    async apiCategoriesIdGet(requestParameters: ApiCategoriesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Category> {
        const response = await this.apiCategoriesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the Category resource.
     * Updates the Category resource.
     */
    async apiCategoriesIdPatchRaw(requestParameters: ApiCategoriesIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCategoriesIdPatch().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling apiCategoriesIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/merge-patch+json';

        const response = await this.request({
            path: `/api/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryToJSON(requestParameters['category']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     * Updates the Category resource.
     * Updates the Category resource.
     */
    async apiCategoriesIdPatch(requestParameters: ApiCategoriesIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Category> {
        const response = await this.apiCategoriesIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a Category resource.
     * Creates a Category resource.
     */
    async apiCategoriesPostRaw(requestParameters: ApiCategoriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling apiCategoriesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryToJSON(requestParameters['category']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     * Creates a Category resource.
     * Creates a Category resource.
     */
    async apiCategoriesPost(requestParameters: ApiCategoriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Category> {
        const response = await this.apiCategoriesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
