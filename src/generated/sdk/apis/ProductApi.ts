/* tslint:disable */
/* eslint-disable */
/**
 * Hello API Platform
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiProductsGetCollection200Response,
  Product,
  ProductJsonld,
} from '../models/index';
import {
    ApiProductsGetCollection200ResponseFromJSON,
    ApiProductsGetCollection200ResponseToJSON,
    ProductFromJSON,
    ProductToJSON,
    ProductJsonldFromJSON,
    ProductJsonldToJSON,
} from '../models/index';

export interface ApiProductsGetCollectionRequest {
    page?: number;
}

export interface ApiProductsIdDeleteRequest {
    id: string;
}

export interface ApiProductsIdGetRequest {
    id: string;
}

export interface ApiProductsIdPatchRequest {
    id: string;
    product: Omit<Product, 'id'>;
}

export interface ApiProductsPostRequest {
    product: Omit<Product, 'id'>;
}

/**
 * 
 */
export class ProductApi extends runtime.BaseAPI {

    /**
     * Retrieves the collection of Product resources.
     * Retrieves the collection of Product resources.
     */
    async apiProductsGetCollectionRaw(requestParameters: ApiProductsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Product>>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductFromJSON));
    }

    /**
     * Retrieves the collection of Product resources.
     * Retrieves the collection of Product resources.
     */
    async apiProductsGetCollection(requestParameters: ApiProductsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Product>> {
        const response = await this.apiProductsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes the Product resource.
     * Removes the Product resource.
     */
    async apiProductsIdDeleteRaw(requestParameters: ApiProductsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes the Product resource.
     * Removes the Product resource.
     */
    async apiProductsIdDelete(requestParameters: ApiProductsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiProductsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a Product resource.
     * Retrieves a Product resource.
     */
    async apiProductsIdGetRaw(requestParameters: ApiProductsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Retrieves a Product resource.
     * Retrieves a Product resource.
     */
    async apiProductsIdGet(requestParameters: ApiProductsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.apiProductsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the Product resource.
     * Updates the Product resource.
     */
    async apiProductsIdPatchRaw(requestParameters: ApiProductsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductsIdPatch().'
            );
        }

        if (requestParameters['product'] == null) {
            throw new runtime.RequiredError(
                'product',
                'Required parameter "product" was null or undefined when calling apiProductsIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/merge-patch+json';

        const response = await this.request({
            path: `/api/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProductToJSON(requestParameters['product']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Updates the Product resource.
     * Updates the Product resource.
     */
    async apiProductsIdPatch(requestParameters: ApiProductsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.apiProductsIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a Product resource.
     * Creates a Product resource.
     */
    async apiProductsPostRaw(requestParameters: ApiProductsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['product'] == null) {
            throw new runtime.RequiredError(
                'product',
                'Required parameter "product" was null or undefined when calling apiProductsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductToJSON(requestParameters['product']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Creates a Product resource.
     * Creates a Product resource.
     */
    async apiProductsPost(requestParameters: ApiProductsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.apiProductsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
